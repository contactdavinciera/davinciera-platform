/**
 * Revenue Sharing Service
 * Handles commission calculations for instructors and affiliates
 * Based on industry best practices from leading e-learning platforms
 */

class RevenueService {
  constructor() {
    // Revenue sharing configuration
    this.config = {
      // Platform commission (what the platform keeps)
      platformCommission: 0.30, // 30%
      
      // Instructor commission (what instructors receive)
      instructorCommission: 0.70, // 70%
      
      // Affiliate commission (what affiliates receive from sales they generate)
      affiliateCommission: 0.15, // 15% of course price
      
      // When affiliate sale occurs, adjust instructor commission
      instructorCommissionWithAffiliate: 0.55, // 55% (reduced from 70%)
      
      // Platform commission remains the same even with affiliate sales
      platformCommissionWithAffiliate: 0.30, // 30%
      
      // Minimum payout thresholds
      minimumPayoutThreshold: 50.00, // $50 minimum for payouts
      
      // Payment processing fees
      paymentProcessingFee: 0.029, // 2.9% + $0.30 per transaction
      paymentProcessingFixed: 0.30
    }
  }

  /**
   * Calculate revenue split for a course sale
   * @param {number} coursePrice - The price of the course
   * @param {boolean} hasAffiliate - Whether the sale came through an affiliate
   * @returns {Object} Revenue breakdown
   */
  calculateRevenueSplit(coursePrice, hasAffiliate = false) {
    const processingFee = (coursePrice * this.config.paymentProcessingFee) + this.config.paymentProcessingFixed
    const netRevenue = coursePrice - processingFee

    if (hasAffiliate) {
      const affiliateAmount = coursePrice * this.config.affiliateCommission
      const instructorAmount = netRevenue * this.config.instructorCommissionWithAffiliate
      const platformAmount = netRevenue - instructorAmount - affiliateAmount

      return {
        coursePrice,
        processingFee,
        netRevenue,
        affiliateAmount,
        instructorAmount,
        platformAmount,
        breakdown: {
          affiliate: `${(this.config.affiliateCommission * 100).toFixed(1)}%`,
          instructor: `${(this.config.instructorCommissionWithAffiliate * 100).toFixed(1)}%`,
          platform: `${((platformAmount / netRevenue) * 100).toFixed(1)}%`
        }
      }
    } else {
      const instructorAmount = netRevenue * this.config.instructorCommission
      const platformAmount = netRevenue * this.config.platformCommission

      return {
        coursePrice,
        processingFee,
        netRevenue,
        affiliateAmount: 0,
        instructorAmount,
        platformAmount,
        breakdown: {
          affiliate: '0%',
          instructor: `${(this.config.instructorCommission * 100).toFixed(1)}%`,
          platform: `${(this.config.platformCommission * 100).toFixed(1)}%`
        }
      }
    }
  }

  /**
   * Calculate total earnings for an instructor
   * @param {Array} courses - Array of course objects with sales data
   * @param {Array} sales - Array of sales transactions
   * @returns {Object} Instructor earnings summary
   */
  calculateInstructorEarnings(courses, sales = []) {
    let totalEarnings = 0
    let totalSales = 0
    const courseEarnings = {}

    courses.forEach(course => {
      const courseSales = sales.filter(sale => sale.courseId === course.id)
      let courseTotal = 0

      courseSales.forEach(sale => {
        const split = this.calculateRevenueSplit(sale.amount, sale.hasAffiliate)
        courseTotal += split.instructorAmount
        totalSales += sale.amount
      })

      // For mock data, use numberOfStudents as sales count
      if (courseSales.length === 0 && course.numberOfStudents > 0) {
        const mockSales = course.numberOfStudents
        const split = this.calculateRevenueSplit(course.price, false)
        courseTotal = split.instructorAmount * mockSales
        totalSales += course.price * mockSales
      }

      courseEarnings[course.id] = {
        courseName: course.title,
        totalEarnings: courseTotal,
        salesCount: courseSales.length || course.numberOfStudents
      }

      totalEarnings += courseTotal
    })

    return {
      totalEarnings,
      totalSales,
      courseEarnings,
      availableForPayout: totalEarnings >= this.config.minimumPayoutThreshold,
      minimumThreshold: this.config.minimumPayoutThreshold
    }
  }

  /**
   * Calculate total earnings for an affiliate
   * @param {Array} referralSales - Array of sales generated by the affiliate
   * @returns {Object} Affiliate earnings summary
   */
  calculateAffiliateEarnings(referralSales = []) {
    let totalCommissions = 0
    let totalReferralValue = 0
    const monthlyBreakdown = {}

    referralSales.forEach(sale => {
      const split = this.calculateRevenueSplit(sale.amount, true)
      totalCommissions += split.affiliateAmount
      totalReferralValue += sale.amount

      const month = new Date(sale.date).toISOString().slice(0, 7) // YYYY-MM
      if (!monthlyBreakdown[month]) {
        monthlyBreakdown[month] = { commissions: 0, sales: 0, count: 0 }
      }
      monthlyBreakdown[month].commissions += split.affiliateAmount
      monthlyBreakdown[month].sales += sale.amount
      monthlyBreakdown[month].count += 1
    })

    return {
      totalCommissions,
      totalReferralValue,
      salesCount: referralSales.length,
      conversionRate: referralSales.length > 0 ? (referralSales.length / 100) : 0, // Mock conversion rate
      monthlyBreakdown,
      availableForPayout: totalCommissions >= this.config.minimumPayoutThreshold,
      minimumThreshold: this.config.minimumPayoutThreshold
    }
  }

  /**
   * Get revenue sharing configuration
   * @returns {Object} Current revenue sharing rates
   */
  getRevenueConfig() {
    return {
      ...this.config,
      // Convert to percentages for display
      platformCommissionPercent: (this.config.platformCommission * 100).toFixed(1),
      instructorCommissionPercent: (this.config.instructorCommission * 100).toFixed(1),
      affiliateCommissionPercent: (this.config.affiliateCommission * 100).toFixed(1),
      instructorCommissionWithAffiliatePercent: (this.config.instructorCommissionWithAffiliate * 100).toFixed(1)
    }
  }

  /**
   * Simulate a course sale and return revenue breakdown
   * @param {number} coursePrice - Price of the course
   * @param {boolean} hasAffiliate - Whether sale came through affiliate
   * @returns {Object} Detailed breakdown for transparency
   */
  simulateSale(coursePrice, hasAffiliate = false) {
    const split = this.calculateRevenueSplit(coursePrice, hasAffiliate)
    
    return {
      ...split,
      explanation: {
        step1: `Course Price: $${coursePrice.toFixed(2)}`,
        step2: `Processing Fee: $${split.processingFee.toFixed(2)} (${(this.config.paymentProcessingFee * 100).toFixed(1)}% + $${this.config.paymentProcessingFixed})`,
        step3: `Net Revenue: $${split.netRevenue.toFixed(2)}`,
        step4: hasAffiliate 
          ? `Affiliate Commission: $${split.affiliateAmount.toFixed(2)} (${(this.config.affiliateCommission * 100).toFixed(1)}% of course price)`
          : 'No affiliate involved',
        step5: `Instructor Share: $${split.instructorAmount.toFixed(2)} (${split.breakdown.instructor} of net revenue)`,
        step6: `Platform Share: $${split.platformAmount.toFixed(2)} (${split.breakdown.platform} of net revenue)`
      }
    }
  }
}

// Create and export a singleton instance
const revenueService = new RevenueService()
export default revenueService
